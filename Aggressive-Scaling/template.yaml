AWSTemplateFormatVersion: '2010-09-09'

Description: Ant Media Server - AWS API Gateway, ASG, Lambda 
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the AWS Elastic
      Beanstalk instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SslCertificate:
    Type: String
    Description: "AWS ARN to ACM generated SSL certificate." 
Mappings:
  Region2Principal:
    us-east-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-west-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-west-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    eu-west-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    eu-west-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    eu-west-3:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-southeast-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-northeast-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-northeast-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-northeast-3:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-southeast-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-south-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-east-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ca-central-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    sa-east-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    cn-north-1:
      EC2Principal: ec2.amazonaws.com.cn
      OpsWorksPrincipal: opsworks.amazonaws.com.cn
    cn-northwest-1:
      EC2Principal: ec2.amazonaws.com.cn
      OpsWorksPrincipal: opsworks.amazonaws.com.cn
    eu-central-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    eu-north-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com

Resources:

  AntMediaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AntMedia-VPC

  OriginZone:
    Type: AWS::EC2::Subnet
    DependsOn: AntMediaVPC
    Properties:
      VpcId: !Ref AntMediaVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AntMedia-Origin-Subnet

  EdgeZone:
    Type: AWS::EC2::Subnet
    DependsOn: AntMediaVPC
    Properties:
      VpcId: !Ref AntMediaVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AntMedia-Edge-Subnet

  DefaultGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref DefaultGateway
      VpcId: !Ref AntMediaVPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AntMediaVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AntMedia-Route-Table

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      GatewayId: !Ref DefaultGateway
      DestinationCidrBlock: 0.0.0.0/0

  SubnetRouteTableAssociationOrigin:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref OriginZone

  SubnetRouteTableAssociationEdge:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref EdgeZone

  OriginGroup:
      Type: 'AWS::AutoScaling::AutoScalingGroup'
      DependsOn:
      - LaunchTemplateOrigin
      Properties:
        VPCZoneIdentifier: 
          - !Ref OriginZone
        LaunchTemplate:
          LaunchTemplateName: !Sub ${AWS::StackName}-AntMedia-LaunchTemplateOrigin
          Version: !GetAtt 'LaunchTemplateOrigin.LatestVersionNumber'
        MinSize: 0
        MaxSize: 1
        DesiredCapacity: 0
        TargetGroupARNs:
          - !Ref ALBTargetGroupOrigin 
        Tags:
        - Key: Name
          Value: Ant-Media-Server
          PropagateAtLaunch: 'true'

  ALBTargetGroupOrigin:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 5080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref AntMediaVPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'

  ALBListener5443:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - GetEBLoadBalancerArn
    Properties:
      Certificates:
        - CertificateArn: !Ref SslCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupOrigin
      LoadBalancerArn: !Ref GetEBLoadBalancer
      Port: '5443'
      Protocol: HTTPS

  LaunchTemplateOrigin:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-AntMedia-LaunchTemplateOrigin
      LaunchTemplateData:
        InstanceType: c5.xlarge
        KeyName: !Ref KeyName
        ImageId: ami-05e70772e64e3d76f
        SecurityGroupIds:
          - !GetAtt "InstanceSecurityGroup.GroupId"
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 10
              VolumeType: gp2
              DeleteOnTermination: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update 
            apt-get install -y python3-pip
            apt-get install -y python3-setuptools
            mkdir -p /opt/aws/bin
            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource OriginGroup --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: OriginInstance
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName}-AntMedia-LaunchTemplateOrigin

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5080'
          ToPort: '5080'
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: '1935'
          ToPort: '1935'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '50000'
          ToPort: '60000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5443'
          ToPort: '5443'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref AntMediaVPC

  LambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Lambda Security Group"
      GroupDescription: "Lambda Traffic"
      VpcId: !Ref AntMediaVPC
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - EDGE
      Name: Ant Media Server Api Gateway

  ApiGatewayCreateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'create'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaCreateFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
            "body" : $input.json('$'),
            "params" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            "stageVariables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "accountId" : "$context.identity.accountId",
                "apiId" : "$context.apiId",
                "apiKey" : "$context.identity.apiKey",
                "authorizerPrincipalId" : "$context.authorizer.principalId",
                "caller" : "$context.identity.caller",
                "cognitoAuthenticationProvider" : "$context.identity.cognitoAuthenticationProvider",
                "cognitoAuthenticationType" : "$context.identity.cognitoAuthenticationType",
                "cognitoIdentityId" : "$context.identity.cognitoIdentityId",
                "cognitoIdentityPoolId" : "$context.identity.cognitoIdentityPoolId",
                "httpMethod" : "$context.httpMethod",
                "stage" : "$context.stage",
                "sourceIp" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "userAgent" : "$context.identity.userAgent",
                "userArn" : "$context.identity.userArn",
                "requestId" : "$context.requestId",
                "resourceId" : "$context.resourceId",
                "resourcePath" : "$context.resourcePath"
                }
            }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
      RequestParameters:
        method.request.querystring.name: false
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayCreateResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'status'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaStatusFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
            "body" : $input.json('$'),
            "params" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            "stageVariables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "accountId" : "$context.identity.accountId",
                "apiId" : "$context.apiId",
                "apiKey" : "$context.identity.apiKey",
                "authorizerPrincipalId" : "$context.authorizer.principalId",
                "caller" : "$context.identity.caller",
                "cognitoAuthenticationProvider" : "$context.identity.cognitoAuthenticationProvider",
                "cognitoAuthenticationType" : "$context.identity.cognitoAuthenticationType",
                "cognitoIdentityId" : "$context.identity.cognitoIdentityId",
                "cognitoIdentityPoolId" : "$context.identity.cognitoIdentityPoolId",
                "httpMethod" : "$context.httpMethod",
                "stage" : "$context.stage",
                "sourceIp" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "userAgent" : "$context.identity.userAgent",
                "userArn" : "$context.identity.userArn",
                "requestId" : "$context.requestId",
                "resourceId" : "$context.resourceId",
                "resourcePath" : "$context.resourcePath"
                }
            }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
      RequestParameters:
        method.request.querystring.name: false
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayStatusResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiGatewayDeployment
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v1'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayCreateMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource:
                  - !GetAtt LambdaCreateFunction.Arn
                  - !GetAtt LambdaStatusFunction.Arn 

  # Lambda Function trigger by API Gateway 
  LambdaCreateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, time

          def wait_for_instances_running(auto_scaling_group_name):
              ec2_client = boto3.client('ec2')
              
              while True:
                  instances = ec2_client.describe_instances(
                      Filters=[
                          {'Name': 'tag:Name', 'Values': ['Ant-Media-Server']},
                          {'Name': 'instance-state-name', 'Values': ['running']}
                      ]
                  )
              
                  for reservation in instances['Reservations']:
                      for instance in reservation['Instances']:
                          print(f"Instance ID: {instance['InstanceId']}, State: {instance['State']['Name']}")

                          if instance['State']['Name'] == 'running':
                              print("Instance is running. Exiting the loop.")
                              return instances  # Return instances once they are running

                  time.sleep(1)

          def lambda_handler(event, context):
              autoscaling_client = boto3.client('autoscaling')
              asg_names = autoscaling_client.describe_auto_scaling_groups()
              asg_name = [group for group in asg_names['AutoScalingGroups'] if
                                 'OriginGroup' in group['AutoScalingGroupName']]
              auto_scaling_group_name = [group['AutoScalingGroupName'] for group in asg_name][0]

              print(auto_scaling_group_name)

              origin_autoscaling_group = autoscaling_client.describe_auto_scaling_groups(
                  AutoScalingGroupNames=[auto_scaling_group_name])

              new_desired_capacity = 1
              min_size = 1

              autoscaling_client = boto3.client('autoscaling')
              response = autoscaling_client.update_auto_scaling_group(
                  AutoScalingGroupName=auto_scaling_group_name,
                  DesiredCapacity=new_desired_capacity,
                  MinSize=min_size
              )

              print(f"DesiredCapacity of Auto Scaling Group '{auto_scaling_group_name}' is set to {new_desired_capacity}")

              # Wait for instances to be in the "running" state
             # wait_for_instances_running(auto_scaling_group_name)

              instances = wait_for_instances_running(auto_scaling_group_name)

              if 'Reservations' in instances and instances['Reservations']:
                  instance = instances['Reservations'][0]['Instances'][0]
              
                  # Check if the instance has a public IP address
                  if 'PublicIpAddress' in instance:
                      public_ip = instance['PublicIpAddress']
                      return {
                          'statusCode': 200,
                          'body': f"{public_ip}"
                      }
                  else:
                      return {
                          'statusCode': 404,
                          'body': "Instance doesn't have a public IP address."
                      }
              else:
                  return {
                      'statusCode': 404,
                      'body': "No instances found with the specified tag."
                  }

        
      Description: AWS Lambda function
      Handler: "index.lambda_handler"  
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.12
      Timeout: 60
 #     VpcConfig:
 #         SecurityGroupIds:
 #         - !Ref "LambdaSecurityGroup"
 #         SubnetIds:
 #         - !Ref OriginZone
 #         - !Ref EdgeZone

  # Lambda Function trigger by API Gateway 
  LambdaStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):
              tag_key = 'Name'
              tag_value = 'Ant-Media-Server'

              instances = ec2.describe_instances(
                  Filters=[
                      {'Name': 'instance-state-name', 'Values': ['running']},
                      {'Name': f'tag:{tag_key}', 'Values': [tag_value]}
                  ]
              )

              if instances['Reservations']:
                  response = {
                      'statusCode': 200,
                      'body': 'True'
                  }
              else:
                  response = {
                      'statusCode': 500,
                      'body': 'False'
                  }

              return response
        
      Description: AWS Lambda function
      Handler: "index.lambda_handler"  
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.12
      Timeout: 60
#      VpcConfig:
#          SecurityGroupIds:
#          - !Ref "LambdaSecurityGroup"
#          SubnetIds:
#          - !Ref OriginZone
#          - !Ref EdgeZone

  # Lambda function to get Elastic Beanstalk Load Balancer ARN
  GetEBLoadBalancerArn:
    Type: AWS::Lambda::Function
    DependsOn:
      - AMSEnvironment
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import traceback

          def lambda_handler(event, context):
              try:
                  elasticbeanstalk = boto3.client('elasticbeanstalk')
                  environment_name = event['ResourceProperties']['EnvironmentName']

                  response = elasticbeanstalk.describe_environment_resources(
                      EnvironmentName=environment_name
                  )

                  # Load balancer bilgilerini içeren listeyi al
                  load_balancers = response['EnvironmentResources']['LoadBalancers']

                  if load_balancers:
                      # İlk yük dengeleyicisinin adını al
                      load_balancer_name = load_balancers[0].get('Name')
                      if load_balancer_name:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {"LoadBalancerName": load_balancer_name}, load_balancer_name)
                      else:
                          cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": "Load balancer name not found."})
                  else:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": "No load balancers found for the environment."})
            
              except Exception as e:
                  traceback.print_exc()
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
      Runtime: python3.12
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaIamRole.Arn
      Timeout: 60

  # Custom resource to get Elastic Beanstalk Load Balancer information
  GetEBLoadBalancer:
    Type: Custom::GetEBLoadBalancer
    Properties:
      ServiceToken: !Sub ${GetEBLoadBalancerArn.Arn}
      EnvironmentName: !Ref AMSEnvironment

  # Lambda Function trigger by Cloudwatch
  LambdaCloudwatchFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
              autoscaling_client = boto3.client('autoscaling')
              asg_names = autoscaling_client.describe_auto_scaling_groups()
              asg_origin_name = [group for group in asg_names['AutoScalingGroups'] if
                                 'OriginGroup' in group['AutoScalingGroupName']]
              asg_origin_group_names = [group['AutoScalingGroupName'] for group in asg_origin_name][0]
              response = autoscaling_client.update_auto_scaling_group(
                  AutoScalingGroupName=asg_origin_group_names,
                  MinSize=0,
                  DesiredCapacity=0
              )

              print(response)

              return {
                  'statusCode': 200,
                  'body': 'Auto Scaling Group updated successfully!'
              }
      #FunctionName: InstanceDeleteFunction
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.12
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          AUTO_SCALING_GROUP_NAME: !Sub "${AWS::StackName}-OriginGroup" 

  # General IAM Role for Lambda Functions
  LambdaIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "MyLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "EC2FullAccessPolicy1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:RunInstances"
                  - "ec2:CreateTags"
                  - "ec2:DescribeInstances"
                  - "autoscaling:UpdateAutoScalingGroup"
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "elasticbeanstalk:DescribeEnvironmentResources"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
        - PolicyName: "CloudWatchLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      Path: '/'

  # Lambda Resource Based Policy for Cloudwatch
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaCloudwatchFunction
      Principal: lambda.alarms.cloudwatch.amazonaws.com
      SourceArn: !GetAtt AutoScalingGroupScaleDownAlarm.Arn

  # Cloudwatch rule to set 0 in Autoscale
  AutoScalingGroupScaleDownAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: AutoScalingGroupScaleDownAlarm
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 3
      MetricName: CPUUtilization 
      Namespace: AWS/EC2
      Period: 300  
      Statistic: Average
      Threshold: 10
      ActionsEnabled: true
      AlarmActions:
        - !GetAtt LambdaCloudwatchFunction.Arn
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref OriginGroup

###########################Beanstalk###########################
  AMSWebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - Region2Principal
              - Ref: AWS::Region
              - EC2Principal
          Action:
          - sts:AssumeRole
      Path: /
  AMSWebServerRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AMSWebServerRole
      PolicyDocument:
        Statement:
        - Effect: Allow
          NotAction: iam:*
          Resource: '*'
      Roles:
      - Ref: AMSWebServerRole
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: AMSWebServerRole
  AMSApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: AWS Elastic Beanstalk Sample PHP Application
  AMSApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      Description: Version 1.0
      ApplicationName:
        Ref: AMSApplication
      SourceBundle:
        S3Bucket: 'ams-beanstalk' 
        S3Key: php.zip
  AMSConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: AMSApplication
      Description: SSH access to PHP Application
      SolutionStackName: 64bit Amazon Linux 2023 v4.0.4 running PHP 8.2
      OptionSettings:
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value:
          Ref: KeyName
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value:
          Ref: WebServerInstanceProfile
  AMSEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      Description: AWS Elastic Beanstalk Environment running Sample PHP Application
      ApplicationName:
        Ref: AMSApplication
      TemplateName:
        Ref: AMSConfigurationTemplate
      VersionLabel:
        Ref: AMSApplicationVersion
      OptionSettings:
        - Namespace: "aws:ec2:vpc"
          OptionName: "VPCId"
          Value: !Ref AntMediaVPC
        - Namespace: "aws:ec2:vpc"
          OptionName: "Subnets"
          Value: !Ref OriginZone
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "STATUS_URL"
          Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/v1/status'
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "CREATE_URL"
          Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/v1/create'
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: application
        - Namespace: aws:elasticbeanstalk:healthreporting:system
          OptionName: SystemType
          Value: enhanced
        - Namespace: aws:elbv2:loadbalancer
          OptionName: SecurityGroups
          Value: !Ref InstanceSecurityGroup
        - Namespace: aws:elbv2:loadbalancer
          OptionName: ManagedSecurityGroup
          Value: !Ref InstanceSecurityGroup
        - Namespace: aws:elbv2:listener:default
          OptionName: ListenerEnabled
          Value: false
        - Namespace: aws:elbv2:listener:443
          OptionName: DefaultProcess
          Value: https
        - Namespace: aws:elbv2:listener:443
          OptionName: Protocol
          Value: HTTPS
        - Namespace: aws:elbv2:listener:443
          OptionName: SSLCertificateArns
          Value: !Ref SslCertificate
        - Namespace: aws:elasticbeanstalk:environment:process:https
          OptionName: Port
          Value: 80
        - Namespace: aws:elasticbeanstalk:environment:process:https
          OptionName: Protocol
          Value: HTTP          
        - Namespace: aws:elasticbeanstalk:environment:process:https
          OptionName: StickinessEnabled
          Value: true
        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !Join
            - ','
            - - !Ref OriginZone
              - !Ref EdgeZone  

###########################Beanstalk###########################
Outputs:
  ApiGatewayEndpointUrl:
    Description: Root URL of the API gateway
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com'


  BeansTalkURL:
    Description: URL of the AWS Elastic Beanstalk Environment
    Value:
      Fn::Join:
      - ''
      - - https://
        - Fn::GetAtt:
          - AMSEnvironment
          - EndpointURL
