AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Ant Media Server AutoScaling CloudFormation Templates.
  If you have any questions, please just drop a line to contact (at) antmedia.io
Parameters:
  EdgeInstanceType:
    Description: Ant Media Server Edge EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.xlarge
      - r5.2xlarge
      - g4dn.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  OriginInstanceType:
    Description: Ant Media Server Origin EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.xlarge
      - r5.2xlarge
      - g4dn.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  MongoDBInstanceType:
    Description: Ant Media MongoDB EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.xlarge
      - r5.2xlarge
      - g4dn.2xlarge
  NginxInstanceType:
    Description: Nginx EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.xlarge
      - r5.2xlarge
      - g4dn.2xlarge
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. If there is no value here, you must create an ssh key (EC2 > Key Pairs).
    Type: 'AWS::EC2::KeyPair::KeyName'
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: can contain only ASCII characters.
  CPUPolicyTargetValue:
    Type: Number
    Default: 40.0
    Description: This parameter for creates new Instances when CPU load exceed to %40.
  AntMediaOriginCapacity:
    Default: '1'
    Description: The initial number of Ant Media Origin instances
    Type: Number
    MinValue: '1'
    MaxValue: '1000'
  AntMediaOriginCapacityMax:
    Default: '10'
    Description: The initial number of Ant Media Origin instances
    Type: Number
    ConstraintDescription: must be between 2 and 1000 EC2 instances.
  AntMediaEdgeCapacity:
    Default: '2'
    Description: The initial number of Ant Media Edge instances
    Type: Number
    MinValue: '1'
    MaxValue: '1000'
  AntMediaEdgeCapacityMax:
    Default: '10'
    Description: The initial number of Ant Media Edge instances
    Type: Number
    ConstraintDescription: must be between 2 and 1000 EC2 instances.
  STUNServerAddress:
    Description: 'STUN Server Address'
    Type: String
    Default: 'stun.wavelength.antmedia.cloud'
  AllocationID:
    Description: 'Allocation ID of ElasticIP'
    Type: String
    Default: ''
  PolicyName:
    Description: 'The policy name that has full access to EC2'
    Type: String
    Default: ''
  WavelengthZones:
    Type: String
    Description: ''
    Default: us-east-1-wl1-bos-wlz-1
    AllowedValues:
      - us-east-1-wl1-atl-wlz-1
      - us-east-1-wl1-bos-wlz-1
      - us-east-1-wl1-chi-wlz-1
      - us-east-1-wl1-dfw-wlz-1
      - us-east-1-wl1-iah-wlz-1
      - us-east-1-wl1-mia-wlz-1
      - us-east-1-wl1-nyc-wlz-1
      - us-east-1-wl1-was-wlz-1
      - us-west-2-wl1-den-wlz-1
      - us-west-2-wl1-las-wlz-1
      - us-west-2-wl1-phx-wlz-1
      - us-west-2-wl1-sfo-wlz-1
      - us-west-2-wl1-sea-wlz-1
      - ap-northeast-2-wl1-cjj-wlz-1
      - ap-northeast-1-wl1-kix-wlz-1
      - ap-northeast-1-wl1-nrt-wlz-1
      - eu-west-2-wl1-lon-wlz-1 

Resources:
  DescribeImagesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: ec2:DescribeImages
                Effect: Allow
                Resource: "*"
  GetLatestAMI:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !Sub ${DescribeImagesRole.Arn}
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback

          def handler(event, context):
            try:
              response = boto3.client('ec2').describe_images(
                  Owners=[event['ResourceProperties']['Owner']],
                  Filters=[
                    {'Name': 'name', 'Values': [event['ResourceProperties']['Name']]},
                    {'Name': 'architecture', 'Values': [event['ResourceProperties']['Architecture']]},
                    {'Name': 'root-device-type', 'Values': ['ebs']},
                  ],
              )

              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
              id = amis[0]['ImageId']

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "ok")
  AntMediaAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !Sub ${GetLatestAMI.Arn}
      Owner: "679593333241"
      Name: "AntMedia-AWS-Marketplace-EE-*"
      Architecture: "x86_64"

  UbuntuAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !Sub ${GetLatestAMI.Arn}
      Owner: "099720109477"
      Name: "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"
      Architecture: "x86_64"

  WavelengthVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Wavelength-Vpc

  OriginSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: WavelengthVPC
    Properties:
      VpcId: !Ref WavelengthVPC
      AvailabilityZone: !Ref WavelengthZones
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Wavelength-Origin-Subnet

  EdgeSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: WavelengthVPC
    Properties:
      VpcId: !Ref WavelengthVPC
      AvailabilityZone: !Ref WavelengthZones
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Wavelength-Edge-Subnet

  CarrierDefaultGateway:
    Type: AWS::EC2::CarrierGateway
    Properties:
      VpcId: !Ref WavelengthVPC

  CarrierDefaultRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WavelengthVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Wavelength-Route-Table

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: CarrierDefaultGateway
    Properties:
      RouteTableId: !Ref CarrierDefaultRouteTable
      CarrierGatewayId: !Ref CarrierDefaultGateway
      DestinationCidrBlock: 0.0.0.0/0

  SubnetRouteTableAssociationOrigin:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CarrierDefaultRouteTable
      SubnetId: !Ref OriginSubnet

  SubnetRouteTableAssociationEdge:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CarrierDefaultRouteTable
      SubnetId: !Ref EdgeSubnet

  OriginGroup:
      Type: 'AWS::AutoScaling::AutoScalingGroup'
      Properties:
        VPCZoneIdentifier: 
          - !Ref OriginSubnet
        LaunchTemplate:
          LaunchTemplateId: !Ref 'OriginLaunchTemplate'
          Version: 1
        MinSize: !Ref AntMediaOriginCapacity
        MaxSize: !Ref AntMediaOriginCapacityMax
        DesiredCapacity: !Ref AntMediaOriginCapacity
        Tags:
        - Key: Name
          Value: Antmedia-Origin
          PropagateAtLaunch: 'true'

      UpdatePolicy:
        AutoScalingReplacingUpdate:
          WillReplace: 'true'

  OriginLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-origin-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociateCarrierIpAddress: true
            Groups:
              - !Ref 'InstanceSecurityGroup'
            DeleteOnTermination: true
        ImageId: !Ref AntMediaAmi
        InstanceType: !Ref OriginInstanceType
        KeyName: !Ref 'KeyName'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sed -i "s/stun1.l.google.com:19302/${STUNServerAddress}/g" /usr/local/antmedia/webapps/WebRTCAppEE/*.html
            bash /usr/local/antmedia/change_server_mode.sh cluster ${DBInstance.PrivateIp} 
            sleep 30
            sudo systemctl restart antmedia

  EdgeGroup:
      Type: 'AWS::AutoScaling::AutoScalingGroup'
      Properties:
        VPCZoneIdentifier:
          - !Ref EdgeSubnet
        LaunchTemplate:
          LaunchTemplateId: !Ref 'EdgeLaunchTemplate'
          Version: 1
        MinSize: !Ref AntMediaEdgeCapacity
        MaxSize: !Ref AntMediaEdgeCapacityMax
        DesiredCapacity: !Ref AntMediaEdgeCapacity
        Tags:
        - Key: Name
          Value: Antmedia-Edge
          PropagateAtLaunch: 'true'

      UpdatePolicy:
        AutoScalingReplacingUpdate:
          WillReplace: 'true'

  EdgeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-edge-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociateCarrierIpAddress: true
            Groups:
              - !Ref 'InstanceSecurityGroup'
            DeleteOnTermination: true
        ImageId: !Ref AntMediaAmi
        InstanceType: !Ref EdgeInstanceType
        KeyName: !Ref 'KeyName'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash 
            sed -i "s/stun1.l.google.com:19302/${STUNServerAddress}/g" /usr/local/antmedia/webapps/WebRTCAppEE/*.html
            bash /usr/local/antmedia/change_server_mode.sh cluster ${DBInstance.PrivateIp} 
            sleep 30
            sudo systemctl restart antmedia

  OriginCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref OriginGroup
      EstimatedInstanceWarmup: 60
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue

  EdgeCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref EdgeGroup
      EstimatedInstanceWarmup: 60
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5080'
          ToPort: '5080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5443'
          ToPort: '5443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1935'
          ToPort: '1935'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 10.0.0.0/16
        - IpProtocol: udp
          FromPort: '5000'
          ToPort: '65000'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref WavelengthVPC

  DBEC2SecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref WavelengthVPC
        GroupDescription: MongoDB SecurityGroup
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: 10.0.0.0/16
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
  DBInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
        KeyName: !Ref KeyName
        ImageId: !Ref UbuntuAmi
        InstanceType: !Ref MongoDBInstanceType
        NetworkInterfaces:
          - SubnetId: !Ref OriginSubnet
            AssociateCarrierIpAddress: true
            DeviceIndex: '0'
            GroupSet:
              - Ref: DBEC2SecurityGroup
        Tags:
        - Key: Name
          Value: Antmedia-MongoDB
        UserData:
         Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
            echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu `lsb_release -cs`/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
            sudo apt-get update
            sudo apt-get install -y mongodb-org python-pip python-setuptools
            sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mongod.conf
            systemctl enable mongod
            systemctl restart mongod


  NginxSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref WavelengthVPC
        GroupDescription: Nginx SecurityGroup
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '5443'
            ToPort: '5443'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0  
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0

  NginxInstance1:
      Type: 'AWS::EC2::Instance'
      DependsOn: OriginCPUPolicy
      Properties:
        KeyName: !Ref KeyName
        ImageId: !Ref UbuntuAmi
        InstanceType: !Ref NginxInstanceType
        IamInstanceProfile: !Ref PolicyName
        NetworkInterfaces:
          - SubnetId: !Ref OriginSubnet
            AssociateCarrierIpAddress: true
            DeviceIndex: '0'
            GroupSet:
              - Ref: NginxSecurityGroup
            PrivateIpAddress: 10.0.10.201
        Tags:
        - Key: Name
          Value: Nginx-1
        UserData:
         Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            echo "deb http://nginx.org/packages/`lsb_release -d | awk '{print $2}' | tr '[:upper:]' '[:lower:]'` `lsb_release -cs` nginx" \
                | sudo tee /etc/apt/sources.list.d/nginx.list
            curl -fsSL https://nginx.org/keys/nginx_signing.key | sudo apt-key add -
            apt update 
            apt install nginx python3-certbot-dns-route53 certbot  keepalived unzip jq -y && systemctl enable nginx keepalived
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip && sudo ./aws/install && mkdir ~/.aws/
            cat <<EOF > ~/.aws/config
            [default]
            region = us-east-1
            EOF
            cat <<EOF> /etc/keepalived/keepalived.conf
            global_defs {
              # Keepalived process identifier
              router_id nginx
              script_user root
              enable_script_security
            }

            vrrp_script check_nginx
            {
                script "/usr/bin/pgrep nginx"
                interval 5
            }

            vrrp_instance VI_1
            {
                debug 2
                interface ens5
                state MASTER
                virtual_router_id 1
                priority 102
                unicast_src_ip 10.0.10.201

                unicast_peer
                {
                    10.0.11.201
                }

                track_script
                {
                    check_nginx
                }

                notify_master /etc/keepalived/failover.sh
            }
            EOF
            cat <<\EOF > /etc/keepalived/failover.sh
            #!/bin/bash

            ID="${AllocationID}"
            AID="$(aws ec2 describe-addresses | jq ".Addresses[0].AssociationId" | tr -d "\"")"
            INSTANCE_ID="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"

            /usr/local/bin/aws ec2 disassociate-address --association-id $AID
            /usr/local/bin/aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id $ID
            EOF
            chmod +x /etc/keepalived/failover.sh
            wget -O /usr/bin/nginx-scale-in.sh https://raw.githubusercontent.com/ant-media/Scripts/master/nginx-scale-in/nginx-scale-in.sh
            wget -O /etc/systemd/system/antmedia-cluster-check.service https://raw.githubusercontent.com/ant-media/Scripts/master/nginx-scale-in/antmedia-cluster-check.service
            sed -i -e "s/^MONGO_DB_IP.*$/MONGO_DB_IP=\"${DBInstance.PrivateIp}\"/g" /usr/bin/nginx-scale-in.sh
            sed -i -e "s|^ORIGIN_NETWORK.*$|ORIGIN_NETWORK=\"10.0.10.0/24\"|g" /usr/bin/nginx-scale-in.sh
            sed -i -e "s|^EDGE_NETWORK.*$|EDGE_NETWORK=\"10.0.11.0/24\"|g" /usr/bin/nginx-scale-in.sh
            chmod +x /usr/bin/nginx-scale-in.sh
            wget -O /etc/nginx/nginx.conf https://raw.githubusercontent.com/ant-media/Scripts/master/nginx-scale-in/nginx.conf
            openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/C=UK/ST=London/L=London/O=AntMedia/CN=localhost" -keyout /etc/nginx/ams.key -out /etc/nginx/ams.crt
            systemctl daemon-reload
            systemctl enable antmedia-cluster-check.service nginx keepalived
            systemctl restart nginx && systemctl restart keepalived
            systemctl start antmedia-cluster-check.service



  NginxInstance2:
      Type: 'AWS::EC2::Instance'
      DependsOn: OriginCPUPolicy
      Properties:
        KeyName: !Ref KeyName
        ImageId: !Ref UbuntuAmi
        InstanceType: !Ref NginxInstanceType
        IamInstanceProfile: !Ref PolicyName
        NetworkInterfaces:
          - SubnetId: !Ref EdgeSubnet
            AssociateCarrierIpAddress: true
            DeviceIndex: '0'
            GroupSet:
              - Ref: NginxSecurityGroup
            PrivateIpAddress: 10.0.11.201
        Tags:
        - Key: Name
          Value: Nginx-2
        UserData:
         Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            echo "deb http://nginx.org/packages/`lsb_release -d | awk '{print $2}' | tr '[:upper:]' '[:lower:]'` `lsb_release -cs` nginx" \
                | sudo tee /etc/apt/sources.list.d/nginx.list
            curl -fsSL https://nginx.org/keys/nginx_signing.key | sudo apt-key add -
            apt update 
            apt install nginx python3-certbot-dns-route53 certbot keepalived unzip jq -y && systemctl enable nginx keepalived
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip && sudo ./aws/install && mkdir ~/.aws/
            cat <<EOF > ~/.aws/config
            [default]
            region = us-east-1
            EOF   
            cat <<EOF> /etc/keepalived/keepalived.conf
            global_defs {
              # Keepalived process identifier
              router_id nginx
              script_user root
              enable_script_security
            }

            vrrp_script check_nginx
            {
                script "/usr/bin/pgrep nginx"
                interval 5
            }

            vrrp_instance VI_1
            {
                debug 2
                interface ens5
                state BACKUP
                virtual_router_id 1
                priority 101
                unicast_src_ip 10.0.11.201

                unicast_peer
                {
                    10.0.10.201
                }

                track_script
                {
                    check_nginx
                }

                notify_master /etc/keepalived/failover.sh
            }
            EOF
            cat <<\EOF > /etc/keepalived/failover.sh
            #!/bin/bash

            ID="${AllocationID}"
            AID="$(aws ec2 describe-addresses | jq ".Addresses[0].AssociationId" | tr -d "\"")"
            INSTANCE_ID="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"

            /usr/local/bin/aws ec2 disassociate-address --association-id $AID
            /usr/local/bin/aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id $ID
            EOF
            chmod +x /etc/keepalived/failover.sh
            wget -O /usr/bin/nginx-scale-in.sh https://raw.githubusercontent.com/ant-media/Scripts/master/nginx-scale-in/nginx-scale-in.sh
            wget -O /etc/systemd/system/antmedia-cluster-check.service https://raw.githubusercontent.com/ant-media/Scripts/master/nginx-scale-in/antmedia-cluster-check.service
            sed -i -e "s/^MONGO_DB_IP.*$/MONGO_DB_IP=\"${DBInstance.PrivateIp}\"/g" /usr/bin/nginx-scale-in.sh
            sed -i -e "s|^ORIGIN_NETWORK.*$|ORIGIN_NETWORK=\"10.0.10.0/24\"|g" /usr/bin/nginx-scale-in.sh
            sed -i -e "s|^EDGE_NETWORK.*$|EDGE_NETWORK=\"10.0.11.0/24\"|g" /usr/bin/nginx-scale-in.sh
            chmod +x /usr/bin/nginx-scale-in.sh
            wget -O /etc/nginx/nginx.conf https://raw.githubusercontent.com/ant-media/Scripts/master/nginx-scale-in/nginx.conf 
            openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/C=UK/ST=London/L=London/O=AntMedia/CN=localhost" -keyout /etc/nginx/ams.key -out /etc/nginx/ams.crt
            systemctl daemon-reload
            systemctl enable antmedia-cluster-check.service nginx keepalived
            systemctl restart nginx && systemctl restart keepalived
            systemctl start antmedia-cluster-check.service

